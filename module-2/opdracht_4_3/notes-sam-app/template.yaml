AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-notes-app

  Sample SAM Template for sam-notes-app

Parameters:
  LabRole:
    Type: String
    Default: 'arn:aws:iam::299414552714:role/LabRole'
  NotesTable:
    Type: String
    Default: "notes"
    MinLength: "3"
    MaxLength: "50"
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  WSConnectionsTable:
    Type: String
    Default: "notes_ws_connections"
    MinLength: "3"
    MaxLength: "50"
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Tracing: Active
    Handler: app.lambda_handler
    Runtime: python3.9
    Architectures:
      - x86_64
    Environment:
      Variables:
        NOTES_TABLE_NAME: !Ref NotesTable
        CONNECTIONS_TABLE_NAME: !Ref WSConnectionsTable
        WS_API_GATEWAY_URL: !Sub "https://${SimpleNotesWebSocket}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  Api:
    TracingEnabled: true

Resources:
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: common-dependency-layer
      Description: Dependencies required for my Python lambdas
      ContentUri: common/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.9
  NotesRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./swagger-spec.json
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","routeKey":"$context.routeKey","status":$context.status,"responseLatency":$context.responseLatency}'
  AccessLogGroup:
    Type: AWS::Logs::LogGroup
  GetNotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_notes/
      Role: !Ref LabRole
      Events:
        GetNotes:
          Type: Api
          Properties:
            RestApiId: !Ref "NotesRestApi"
            Path: /users/{user_id}/notes
            Method: get
  PostNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: post_note/
      Role: !Ref LabRole
      Layers:
        - !Ref CommonLayer
      Events:
        NotesApi:
          Type: Api
          Properties:
            RestApiId: !Ref "NotesRestApi"
            Path: /users/{user_id}/notes
            Method: post
  GetNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_note/
      Role: !Ref LabRole
      Events:
        GetNotes:
          Type: Api
          Properties:
            RestApiId: !Ref "NotesRestApi"
            Path: /users/{user_id}/notes/{note_id}
            Method: get
  PutNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: put_note/
      Role: !Ref LabRole
      Layers:
        - !Ref CommonLayer
      Events:
        NotesApi:
          Type: Api
          Properties:
            RestApiId: !Ref "NotesRestApi"
            Path: /users/{user_id}/notes/{note_id}
            Method: put
  DeleteNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_note/
      Role: !Ref LabRole
      Layers:
        - !Ref CommonLayer
      Events:
        NotesApi:
          Type: Api
          Properties:
            RestApiId: !Ref "NotesRestApi"
            Path: /users/{user_id}/notes/{note_id}
            Method: delete
  NotesDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Ref NotesTable
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  ## WebSockets basics
  SimpleNotesWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SimpleNotesWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectIntegration
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref LabRole
      CodeUri: on_connect/
      Environment:
        Variables:
          TABLE_NAME: !Ref WSConnectionsTable
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectIntegration
  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref LabRole
      CodeUri: on_disconnect/
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DefaultIntegration
  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
      Description: Default Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDefaultFunction.Arn}/invocations
  OnDefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref LabRole
      CodeUri: on_default/
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendIntegration
  SendIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref LabRole
      CodeUri: send_message/
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "connectionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "connectionId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref WSConnectionsTable

  ## WebSockets Expanded
  PostNoteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
      RouteKey: notepost
      AuthorizationType: NONE
      OperationName: PostNoteRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref PostNoteIntegration
  PostNoteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
      Description: Post note integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostNoteFunction.Arn}/invocations
  PutNoteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
      RouteKey: noteput
      AuthorizationType: NONE
      OperationName: PutNoteRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref PutNoteIntegration
  PutNoteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
      Description: Put note integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutNoteFunction.Arn}/invocations
  DeleteNoteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
      RouteKey: notedelete
      AuthorizationType: NONE
      OperationName: DeleteNoteRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DeleteNoteIntegration
  DeleteNoteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
      Description: Delete note integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteNoteFunction.Arn}/invocations

  ## Deployment
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - SendRoute
      - DisconnectRoute
      - PostNoteRoute
      - PutNoteRoute
      - DeleteNoteRoute
    Properties:
      ApiId: !Ref SimpleNotesWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref SimpleNotesWebSocket

  ## Permissions
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleNotesWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleNotesWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleNotesWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com
  PostNotePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleNotesWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PostNoteFunction
      Principal: apigateway.amazonaws.com
  PutNotePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleNotesWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PutNoteFunction
      Principal: apigateway.amazonaws.com
  GetNotePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleNotesWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetNoteFunction
      Principal: apigateway.amazonaws.com
  GetNotesPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleNotesWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetNotesFunction
      Principal: apigateway.amazonaws.com
  DeleteNotePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleNotesWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteNoteFunction
      Principal: apigateway.amazonaws.com

Outputs:
  GetNotesApi:
    Description: "API Gateway endpoint URL for Prod stage for Notes function"
    Value: !Sub "https://${NotesRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/notes/"
  SimpleNotesWebSocket:
    Description: "API Gateway endpoint URL for Prod stage for Notes function"
    Value: !Sub "https://${SimpleNotesWebSocket}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  GetNotesFunction:
    Description: "GetNotesFunction Function ARN"
    Value: !GetAtt GetNotesFunction.Arn
  PostNoteFunction:
    Description: "PostNoteFunction Function ARN"
    Value: !GetAtt PostNoteFunction.Arn
  GetNoteFunction:
    Description: "GetNoteFunction Function ARN"
    Value: !GetAtt GetNoteFunction.Arn
  PutNoteFunction:
    Description: "PutNoteFunction Function ARN"
    Value: !GetAtt PutNoteFunction.Arn
  DeleteNoteFunction:
    Description: "DeleteNoteFunction Function ARN"
    Value: !GetAtt DeleteNoteFunction.Arn
