name: Release pipeline

env:
  ASSIGNMENT_PATH: ${{ vars.RELEASE_PATH }}
  DOCKER_SERVICE_NAME: cnsd-bank-service

on:
  workflow_dispatch:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
    paths:
      - 'module-1/**/frontend/**'
      - 'module-1/**/pom.xml'
      - 'module-1/**/src/main/**'
      - 'module-1/**/src/test/**'
      - '.github/workflows/module-1-release-pipeline.yml'

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.ACTIONS_SECRET }}

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B clean install --file pom.xml
      working-directory: ${{ env.ASSIGNMENT_PATH }}

    - name: Upload Jacoco code report
      uses: actions/upload-artifact@v3
      with:
        name: cnsd-bank-jacoco-report
        path: ${{ env.ASSIGNMENT_PATH }}/target/site/jacoco

    - name: Upload PITest code report
      uses: actions/upload-artifact@v3
      with:
        name: cnsd-bank-pitest-report
        path: ${{ env.ASSIGNMENT_PATH }}/target/pit-reports

    - name: Sonarcube analysis
      run: |
        mvn sonar:sonar \
        -Dsonar.projectKey=jordybronowicki37-CNSD \
        -Dsonar.host.url=https://sonar.cloud-native-minor.it \
        -Dsonar.login=${{ secrets.SONARCUBE_SECRET }}
      working-directory: ${{ env.ASSIGNMENT_PATH }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag and push the Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.DOCKER_SERVICE_NAME }}
        IMAGE_TAG: v${{ github.run_number }}
      working-directory: ${{ env.ASSIGNMENT_PATH }}
      run: |
        IMAGE_NAME=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
        docker build --quiet -t $IMAGE_NAME .
        echo "build image: $IMAGE_NAME"
        docker push $IMAGE_NAME
        echo "pushed image: $IMAGE_NAME"
        echo "image=$IMAGE_NAME" >> "$GITHUB_OUTPUT"

    - name: Tag the build version
      run: |
        git tag "Build-v$GITHUB_RUN_NUMBER"
        git push origin "Build-v$GITHUB_RUN_NUMBER" --set-upstream

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ASSIGNMENT_PATH }}/task-definition.json
        container-name: account-service-container
        image: ${{ steps.build-image.outputs.image }}
        environment-variables: "SPRING_PROFILES_ACTIVE=prod"

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: AccountServiceBlueGreen-2
        cluster: ecs-cluster-staging
        wait-for-service-stability: true
        codedeploy-appspec: ${{ env.ASSIGNMENT_PATH }}/appspec.yaml

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.ACTIONS_SECRET }}
        name: v${{ github.run_number }}
        tag_name: v${{ github.run_number }}
        draft: false
        prerelease: false

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.ACTIONS_SECRET }}

      - name: Use Node.js v17.x
        uses: actions/setup-node@v3
        with:
          node-version: '17.x'

      - name: Install dependencies
        run: npm install
        working-directory: ${{ env.ASSIGNMENT_PATH }}/frontend

      - name: Run the tests
        run: |
          npm run lint
          npm run test
        working-directory: ${{ env.ASSIGNMENT_PATH }}/frontend

      - name: Build production version
        run: npm run build
        working-directory: ${{ env.ASSIGNMENT_PATH }}/frontend

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Upload to S3
        run: aws s3 sync dist s3://cnsd-bank-frontend-staging/
        working-directory: ${{ env.ASSIGNMENT_PATH }}/frontend
